generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Program {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime @updatedAt @db.Timestamptz(3)
  chainId          String
  programId        String
  programCreatedAt String
  programUpdatedAt String
  rounds           Round[]

  @@unique([chainId, programId], name: "programIdentifier")
  @@map("program")
}

model Round {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime  @updatedAt @db.Timestamptz(3)
  chainId               String
  program               Program   @relation(fields: [chainId, programId], references: [chainId, programId])
  programId             String
  roundId               String
  roundCreatedAt        String
  roundUpdatedAt        String
  applicationsStartTime String
  applicationsEndTime   String
  roundStartTime        String
  roundEndTime          String
  payoutStrategy        String
  roundToken            String
  projects              Project[]
  matches               Match[]
  roundSummary          RoundSummary[]

  @@unique([chainId, roundId], name: "roundIdentifier")
  @@map("round")
}

model VotingStrategy {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime @updatedAt @db.Timestamptz(3)
  roundId         String
  chainId         String
  strategyAddress String
  strategyName    String
  strategyVersion String
  strategyId      String
  // Round           Round?

  @@unique([chainId, roundId], name: "votingStrategyIdentifier")
  @@map("votingStrategy")
}

model Project {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime @updatedAt @db.Timestamptz(3)
  chainId              String
  round                Round    @relation(fields: [chainId, roundId], references: [chainId, roundId])
  roundId              String
  projectId            String
  projectCreatedAt     String
  projectUpdatedAt     String
  projectStatus        String
  projectPayoutAddress String?
  projectSummary       ProjectSummary[]

  @@unique([projectId, roundId, chainId], name: "projectIdentifier")
  @@map("project")
}

model Vote {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime @updatedAt @db.Timestamptz(3)
  chainId        String
  roundId        String
  projectId      String
  voteId         String
  voteAmount     String
  voteCreatedAt  String
  voterAddress   String
  voteToAddress  String
  voteToken      String
  voteVersion    String
  voteStrategyId String

  @@unique([roundId, projectId, voteId], name: "voteIdentifier")
  @@map("vote")
}

model Match {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now()) @db.Timestamptz(3)
  updatedAt               DateTime @updatedAt @db.Timestamptz(3)
  chainId                 String
  projectId               String
  matchAmountInUSD        Float
  totalContributionsInUSD Float
  matchPoolPercentage     Float
  matchAmountInToken      Float
  round                   Round    @relation(fields: [chainId, roundId], references: [chainId, roundId])
  roundId                 String
  projectPayoutAddress    String
  uniqueContributorsCount Int?

  @@unique([roundId, projectId], name: "matchIdentifier")
  @@map("match")
}

model RoundSummary {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now()) @db.Timestamptz(3)
  updatedAt               DateTime @updatedAt @db.Timestamptz(3)
  chainId                 String
  contributionCount       Int
  uniqueContributors      Int
  totalContributionsInUSD Float
  averageUSDContribution  Float
  round                   Round    @relation(fields: [chainId, roundId], references: [chainId, roundId])
  roundId                 String

  @@unique([roundId], name: "roundSummaryIdentifier")
  @@map("roundSummary")
}

model ProjectSummary {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now()) @db.Timestamptz(3)
  updatedAt               DateTime @updatedAt @db.Timestamptz(3)
  chainId                 String
  contributionCount       Int
  uniqueContributors      Int
  totalContributionsInUSD Float
  averageUSDContribution  Float
  project                 Project  @relation(fields: [projectId, roundId, chainId], references: [projectId, roundId, chainId])
  projectId               String
  roundId                 String

  @@unique([projectId, roundId], name: "projectSummaryIdentifier")
  @@map("projectSummary")
}
